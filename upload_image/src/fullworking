import React, { useState, useEffect } from "react";
import "./App.css";
import { FrappeApp } from "frappe-js-sdk";

function App() {
  const siteurl = "https://yash.tranqwality.com";
  const frappe = new FrappeApp(siteurl);
  const auth = frappe.auth();
  const db = frappe.db();
  const call = frappe.call();
  const files = frappe.file();

  const [folders, setFolders] = useState([]);
  const [count, setCount] = useState(0);
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedImages, setSelectedImages] = useState([]);
  const [selectedName, setSelectedName] = useState(null);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [currentFolderIndex, setCurrentFolderIndex] = useState(null);
  const [currentSubFolderIndex, setCurrentSubFolderIndex] = useState(null);

  const [parentfolder, setParentfolder] = useState("");

  function getUrlParameter(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
    var results = regex.exec(location.search);
    return results === null
      ? ""
      : decodeURIComponent(results[1].replace(/\+/g, " "));
  }

  // Get the parameters from the URL
  let lead = getUrlParameter("lead");
  let firstName = getUrlParameter("first_name");

  console.log("First Name:", firstName);

  useEffect(() => {
    if (lead) {
      setParentfolder(lead);
    }
  }, [lead]);

  const initializeFolders = async () => {
    try {
      const data = [
        [
          "Roof Measurements",
          [
            ["Complete with all the measurements", ""],
            ["Roof Obstructions", ""],
            ["Tilts of every plane", ""],
          ],
        ],
        [
          "Electrical",
          [
            ["MSP (wide-angle)", ""],
            ["MSP Cover", ""],
            ["MSP Main Breaker", ""],
            ["MSP (close-up, cover off)", ""],
            ["MSP Voltage", ""],
            ["Water main grounding", ""],
            ["Meter (close-up)", ""],
            ["Meter (wide-angle)", ""],
            ["Service Conduit", ""],
            ["Is there a sub-panel?", ""],
            ["Sub Panel", ""],
            ["Electrical Red Flags", ""],
            ["Ground rod/Clamp", ""],
          ],
        ],
        [
          "Rafters and Attic",
          [
            ["Size of Rafters", ""],
            ["Spacing of Rafters", ""],
            ["Attic Photos", ""],
            ["Rafter/attic red flags", ""],
            ["Working space in attic?", ""],
          ],
        ],
        [
          "Elevation",
          [
            ["Aurora Layout Picture", ""],
            ["Front of Home", ""],
            ["Right Side of Home", ""],
            ["Left Side of Home", ""],
            ["Rear of Home", ""],
            ["Is there a detached structure?", ""],
            ["Detached structure photos", ""],
            ["Is there a sub-panel in the detached structure?", ""],
            ["Distance of trench", ""],
            ["Trench details", ""],
            ["Additional exterior comments", ""],
          ],
        ],
        [
          "Roofing Material",
          [
            ["Potential Shading Issues?", ""],
            ["Layers of shingle", ""],
            ["Shading Issues", ""],
            ["Roof condition passes?", ""],
            ["Roof red flags", ""],
            ["Additional roof comments", ""],
          ],
        ],
        ["Miscellaneous Photos", [["", ""]]],
        [
          "Existing System",
          [
            ["Is there an existing system?", ""],
            ["Module Type and Quantity", ""],
            ["Inverter Type and Quantity", ""],
          ],
        ],
      ];

      const newFolders = data.map(([mainHeading, subheadings], mainIndex) => {
        const folder = {
          id: mainIndex + 1,
          mainname: mainHeading,
          images: [],
          minimized: false,
          subfolders: subheadings.map(([subheading, value], subIndex) => ({
            id: mainIndex * 10 + subIndex + 1,
            name: subheading,
            value: value,
            images: [],
          })),
        };
        return folder;
      });
      setFolders(newFolders);
    } catch (error) {
      console.error("Error initializing folders:", error);
    }
  };
  useEffect(() => {
    initializeFolders();
  }, []);

  const callfolder = async () => {
    try {
      const docs = await db.getDocList("File", {
        fields: ["name", "file_name"],
        filters: [
          ["folder", "=", "Home"],
          ["is_folder", "=", 1],
          ["file_name", "=", parentfolder],
        ],
      });

      if (docs.length > 0) {
        const mainFolders = await db.getDocList("File", {
          fields: ["name", "file_name"],
          filters: [
            ["folder", "=", `Home/${parentfolder}`],
            ["is_folder", "=", 1],
          ],
        });

        const allSubfolders = await Promise.all(
          mainFolders.map(async (mainFolder) => {
            const subFolders = await db.getDocList("File", {
              fields: ["name", "file_name"],
              filters: [
                ["folder", "=", `Home/${parentfolder}/${mainFolder.file_name}`],
                ["is_folder", "=", 1],
              ],
            });

            const subfolderImages = await Promise.all(
              subFolders.map(async (subFolder) => {
                const images = await db.getDocList("File", {
                  fields: ["name", "file_name", "file_url", "custom_flag"],
                  filters: [
                    [
                      "folder",
                      "=",
                      `Home/${parentfolder}/${mainFolder.file_name}/${subFolder.file_name}`,
                    ],
                  ],
                });
                const imageList = images.map((img) => ({
                  src: `${siteurl}${img.file_url}`,
                  name: img.file_name,
                  id: img.name,
                  custom_flag: img.custom_flag || false,
                }));

                return {
                  id: subFolder.name,
                  name: subFolder.file_name,
                  images: imageList,
                  minimized: false,
                };
              })
            );

            return {
              id: mainFolder.name,
              mainname: mainFolder.file_name,
              subfolders: subfolderImages,
            };
          })
        );

        setFolders(allSubfolders);
        setCount(1);
      }
    } catch (error) {
      console.error("Error fetching folders:", error);
    }
  };

  useEffect(() => {
    if (count === 0) {
      callfolder();
    }
  }, [parentfolder]);

  const handleFolderClick = (folder, index) => {
    // setCurrentFolderIndex(index);
    const updatedFolders = folders.map((f, i) =>
      i === index ? { ...f, minimized: !f.minimized } : f
    );
    setFolders(updatedFolders);
  };

  const closeModal = () => {
    setModalVisible(false);
    setSelectedImages([]);
    setSelectedName(null);
  };

  const showNextImage = () => {
    setCurrentImageIndex((prevIndex) => {
      const newIndex = (prevIndex + 1) % selectedImages.length;
      setSelectedName(selectedImages[newIndex].name);
      return newIndex;
    });
  };

  const showPrevImage = () => {
    setCurrentImageIndex((prevIndex) => {
      const newIndex =
        prevIndex === 0 ? selectedImages.length - 1 : prevIndex - 1;
      setSelectedName(selectedImages[newIndex].name);
      return newIndex;
    });
  };

  const handleThumbnailClick = (index) => {
    setCurrentImageIndex(index);
    setSelectedName(selectedImages[index].name);
    setModalVisible(true);
    setCurrentFolderIndex(folderIndex);
    setCurrentSubFolderIndex(subfolderIndex);
  };

  const addFolder = () => {
    setFolders([...folders, { id: Date.now(), name: "", images: [] }]);
  };

  const handleImageChange = (folderIndex, subfolderIndex, event) => {
    const files = Array.from(event.target.files);
    const imageObjects = files.map((file) => ({
      src: URL.createObjectURL(file),
      name: file.name,
    }));
    const updatedFolders = folders.map((folder, fIndex) => {
      if (fIndex === folderIndex) {
        const updatedSubfolders = folder.subfolders.map((subfolder, sIndex) =>
          sIndex === subfolderIndex
            ? { ...subfolder, images: [...subfolder.images, ...imageObjects] }
            : subfolder
        );
        return { ...folder, subfolders: updatedSubfolders };
      }
      return folder;
    });
    setFolders(updatedFolders);
  };

  const toggleFlag = (folderIndex, subfolderIndex, imageIndex, event) => {
    event.stopPropagation();
    const updatedFolders = folders.map((folder, fIndex) => {
      if (fIndex === folderIndex) {
        const updatedSubfolders = folder.subfolders.map((subfolder, sIndex) => {
          if (sIndex === subfolderIndex) {
            const updatedImages = subfolder.images.map((image, iIndex) => {
              if (iIndex === imageIndex) {
                const newFlagValue = !image.custom_flag;
                console.log("New flag value:", newFlagValue);

                if (newFlagValue) {
                  alert(`Added to flag: ${image.name}`);
                } else {
                  alert(`Removed from flag: ${image.name}`);
                }
                return { ...image, custom_flag: newFlagValue };
              }
              return image;
            });
            return { ...subfolder, images: updatedImages };
          }
          return subfolder;
        });
        return { ...folder, subfolders: updatedSubfolders };
      }
      return folder;
    });
    setFolders(updatedFolders);
    console.log("After update:", updatedFolders);
  };

  const handleEditImage = (folderIndex, subfolderIndex, imageIndex, event) => {
    event.stopPropagation();
    const updatedFolders = folders.map((folder, fIndex) => {
      if (fIndex === folderIndex) {
        const updatedSubfolders = folder.subfolders.map((subfolder, sIndex) => {
          if (sIndex === subfolderIndex) {
            const updatedImages = subfolder.images.filter(
              (_, iIndex) => iIndex !== imageIndex
            );
            return { ...subfolder, images: updatedImages };
          }
          return subfolder;
        });
        return { ...folder, subfolders: updatedSubfolders };
      }
      return folder;
    });
    setFolders(updatedFolders);
  };

  const createfolders = async () => {
    console.log(parentfolder);
    try {
      // Create the parent folder if it doesn't exist
      let existingParentFolder = await db.getDocList("File", {
        fields: ["name"],
        filters: [
          ["folder", "=", "Home"],
          ["file_name", "=", parentfolder],
        ],
      });

      if (existingParentFolder.length === 0) {
        await db.createDoc("File", {
          file_name: parentfolder,
          is_folder: 1,
          folder: `Home`,
        });
      }

      for (const folder of folders) {
        try {
          const mainFolderName = folder.mainname;
          // Check if the main folder exists
          let existingMainFolder = await db.getDocList("File", {
            fields: ["name"],
            filters: [
              ["folder", "=", `Home/${parentfolder}`],
              ["file_name", "=", mainFolderName],
            ],
          });

          if (existingMainFolder.length === 0) {
            await db.createDoc("File", {
              file_name: mainFolderName,
              is_folder: 1,
              folder: `Home/${parentfolder}`,
            });
          }

          for (const subfolder of folder.subfolders) {
            try {
              const subfolderName = subfolder.name;
              const subfolderdisc = subfolder.value;

              // Check if the subfolder exists
              let existingSubFolder = await db.getDocList("File", {
                fields: ["name"],
                filters: [
                  ["folder", "=", `Home/${parentfolder}/${mainFolderName}`],
                  ["file_name", "=", subfolderName],
                ],
              });

              if (existingSubFolder.length === 0) {
                await db.createDoc("File", {
                  file_name: subfolderName,
                  is_folder: 1,
                  folder: `Home/${parentfolder}/${mainFolderName}`,
                  custom_description: subfolderdisc,
                });
              }

              const existingImagesInSubFolder = await db.getDocList("File", {
                fields: ["name", "file_name", "custom_flag"],
                filters: [
                  [
                    "folder",
                    "=",
                    `Home/${parentfolder}/${mainFolderName}/${subfolderName}`,
                  ],
                ],
              });

              const existingImageNames = existingImagesInSubFolder.map(
                (img) => img.file_name
              );

              // Update existing images' custom_flag
              for (const existingImage of existingImagesInSubFolder) {
                const correspondingNewImage = subfolder.images.find(
                  (img) => img.name === existingImage.file_name
                );
                if (correspondingNewImage) {
                  if (
                    existingImage.custom_flag !==
                    correspondingNewImage.custom_flag
                  ) {
                    await db.updateDoc("File", existingImage.name, {
                      custom_flag: correspondingNewImage.custom_flag,
                    });
                  }
                }
              }

              const newImages = subfolder.images.filter(
                (image) => !existingImageNames.includes(image.name)
              );

              const fetchImageBlob = async (imageUrl) => {
                const response = await fetch(imageUrl);
                return await response.blob();
              };

              const blobs = await Promise.all(
                newImages.map((img) => fetchImageBlob(img.src))
              );

              const images = blobs.map((blob, index) => {
                const img = newImages[index];
                return new File([blob], img.name, { type: blob.type });
              });

              const fileArgs = {
                isPrivate: false,
                folder: `Home/${parentfolder}/${mainFolderName}/${subfolderName}`,
                doctype: "User",
                docname: "Administrator",
                fieldname: "image",
              };

              for (const image of images) {
                await files.uploadFile(
                  image,
                  fileArgs,
                  (completedBytes, totalBytes) =>
                    console.log(Math.round((completedBytes / totalBytes) * 100))
                );
              }
            } catch (subFolderError) {
              if (subFolderError.exc_type !== "DuplicateEntryError") {
                console.error(
                  `Error creating subfolder ${subfolder.name}:`,
                  subFolderError
                );
              }
            }
          }
        } catch (mainFolderError) {
          if (mainFolderError.exc_type !== "DuplicateEntryError") {
            console.error(
              `Error creating main folder ${folder.mainname}:`,
              mainFolderError
            );
          }
        }
      }
      alert("All images have been uploaded successfully.");
    } catch (error) {
      console.error("Error uploading images:", error);
    }
  };

  const openpdf = () => {
    document.querySelector(".pdf").style.display = "block";
    document.querySelector(".main").style.display = "none";
  };

  const createdoc = () => {
    db.updateDoc("image printer", "77ca1a2b9a", {
      title: "Test",
      select: document.querySelector("#size").value,
      flag: document.querySelector("#flags").value,
      description: document.querySelector("#description").value,
      lead_ref: lead,
    })
      .then((doc) => {
        window.open(doc.file_link, "_blank");
      })
      .catch((error) => console.error(error));
  };

  const closepdf = () => {
    document.querySelector(".pdf").style.display = "none";
    document.querySelector(".main").style.display = "block";
  };
  return (
    <>
      <div className="allfeild">
        <div class="hamburger-menu">
          <input id="menu__toggle" type="checkbox" />
          <label class="menu__btn" for="menu__toggle">
            <span></span>
          </label>
          <ul class="menu__box">
            <li>
              <a class="menu__item" href="#">
                {firstName}
              </a>
            </li>
            <button
              onClick={openpdf}
              style={{
                marginLeft: "25px",
                borderRadius: "10px",
                padding: "10px",
                backgroundColor: "#a6a6f9",
              }}
            >
              Create PDF
            </button>
          </ul>
        </div>
        <div
          className="pdf"
          style={{ display: "none", width: "100vw", height: "100vh" }}
        >
          <div
            style={{
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              flexDirection: "column",
              width: "60%",
              height: "60%",
              position: "relative",
              transform: "translate(-50%, -50%)",
              top: "50%",
              left: "50%",
              zIndex: "9999",
              backgroundColor: "#d7d7d7",
              borderRadius: "20px",
            }}
          >
            <button
              onClick={closepdf}
              style={{
                backgroundColor: "red",
                border: "none",
                padding: "10px",
                position: "relative",
                top: "-50px",
                borderRadius: "50%",
                left: "inherit",
              }}
            >
              X
            </button>
            <h1>PDF Selections</h1>
            <label for="size" style={{ fontSize: "1.5em" }}>
              Image Size
            </label>

            <select id="size" style={{ width: "50%", height: "10%" }}>
              <option value="Small">Small</option>
              <option value="Medium">Medium</option>
              <option value="Large">Large</option>
            </select>

            <label for="flags" style={{ fontSize: "1.5em" }}>
              Image Selection
            </label>

            <select id="flags" style={{ width: "50%", height: "10%" }}>
              <option value="All">All</option>
              <option value="Flag">Flag</option>
              <option value="No Flag">No Flag</option>
            </select>

            <label for="description" style={{ fontSize: "1.5em" }}>
              Discription
            </label>

            <select id="description" style={{ width: "50%", height: "10%" }}>
              <option value="1">YES</option>
              <option value="0">NO</option>
            </select>
            <button
              style={{
                marginTop: "5px",
                backgroundColor: "white",
                padding: "10px",
                border: "none",
                width: "50%",
                borderRadius: "10px",
              }}
              onClick={createdoc}
            >
              Create
            </button>
          </div>
        </div>
        <center className="main" style={{ display: "block" }}>
          <h1>Image Uploader</h1>
          <button
            className="addfolder"
            //  onClick={addFolder}
            style={{ display: "none" }}
          >
            Add Folder
          </button>
          <div className="folders-container">
            {folders.map((folder, folderIndex) => (
              <div key={folder.id}>
                <h2 className="folder-heading">{folder.mainname}</h2>
                {folder.subfolders.map((subfolder, subfolderIndex) => (
                  <div
                    className={`folder ${folder.minimized ? "minimized" : ""}`}
                    key={subfolder.id}
                    onClick={(e) => {
                      if (e.target.className.includes("folder")) {
                        handleFolderClick(folder, folderIndex);
                      }
                    }}
                  >
                    <div className="foldername">
                      <input
                        type="text"
                        readOnly
                        value={subfolder.name}
                        className="fixednames"
                      />
                      <input
                        type="text"
                        placeholder="Enter Discription"
                        className="foldername-input"
                        value={subfolder.value}
                      />
                      {subfolder.images.length === 0 ? (
                        <label className="custom-file-upload">
                          <input
                            type="file"
                            id={`files-${folder.id}`}
                            name="files"
                            multiple
                            onChange={(e) =>
                              handleImageChange(folderIndex, subfolderIndex, e)
                            }
                            onClick={(e) => e.stopPropagation()}
                          />
                          Choose files
                        </label>
                      ) : null}
                    </div>
                    <div className="image-container">
                      {subfolder.images.map((image, imageIndex) => (
                        <div key={imageIndex} style={{ position: "relative" }}>
                          <img
                            className={`images ${image.flag ? "flagged" : ""}`}
                            src={image.src}
                            alt={image.name}
                            onClick={() => {
                              setSelectedImages(
                                folder.subfolders[subfolderIndex].images
                              );
                              setCurrentImageIndex(imageIndex);
                              setSelectedName(image.name);
                              setModalVisible(true);
                              setCurrentFolderIndex(folderIndex);
                              setCurrentSubFolderIndex(subfolderIndex);
                            }}
                            onError={(e) => {
                              e.target.src =
                                "https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/File_alt_font_awesome.svg/1024px-File_alt_font_awesome.svg.png";
                            }}
                          />
                          <p
                            style={{
                              width: "70px",
                              overflow: "hidden",
                              height: "15px",
                            }}
                          >
                            {image.name.split(" ").slice(0, 10).join(" ")}
                          </p>
                          <button
                            className="flag-button"
                            style={{
                              position: "absolute",
                              top: "5px",
                              left: "5px",
                              background: image.flag ? "green" : "gray",
                              color: "white",
                              borderRadius: "5px",
                              padding: "2px 5px",
                              cursor: "pointer",
                            }}
                            onClick={(event) =>
                              toggleFlag(
                                folderIndex,
                                subfolderIndex,
                                imageIndex,
                                event
                              )
                            }
                          >
                            {image.custom_flag ? (
                              <i
                                class="fa-solid fa-flag"
                                style={{ color: "#005eff" }}
                              ></i>
                            ) : (
                              <i class="fa-regular fa-flag"></i>
                            )}
                          </button>
                          <label
                            className="edit-button"
                            style={{
                              position: "absolute",
                              top: "5px",
                              right: "5px",
                              background: "rgba(0, 0, 0, 0.5)",
                              color: "white",
                              borderRadius: "5px",
                              padding: "2px 5px",
                              cursor: "pointer",
                              backgroundColor: "red",
                            }}
                            onClick={(event) =>
                              handleEditImage(
                                folderIndex,
                                subfolderIndex,
                                imageIndex,
                                event
                              )
                            }
                          >
                            X
                          </label>
                        </div>
                      ))}
                      {subfolder.images.length > 0 ? (
                        <label className="custom-file-upload plus-button">
                          <input
                            type="file"
                            id={`files-${folder.id}`}
                            name="files"
                            multiple
                            onChange={(e) =>
                              handleImageChange(folderIndex, subfolderIndex, e)
                            }
                            onClick={(e) => e.stopPropagation()}
                          />
                          <h1 style={{ color: "black", marginTop: "22px" }}>
                            +
                          </h1>
                        </label>
                      ) : null}
                    </div>
                  </div>
                ))}
              </div>
            ))}
            <button className="submitbtn" onClick={createfolders}>
              Submit
            </button>
          </div>
          {modalVisible && (
            <Modal
              images={selectedImages}
              currentImageIndex={currentImageIndex}
              onClose={closeModal}
              onNext={showNextImage}
              onPrev={showPrevImage}
              onThumbnailClick={handleThumbnailClick}
              imagename={selectedName}
              toggleFlagInModal={(imageIndex, event) => {
                event.stopPropagation();
                toggleFlag(
                  currentFolderIndex,
                  currentSubFolderIndex,
                  imageIndex,
                  event
                );
              }}
            />
          )}
        </center>
      </div>
    </>
  );
}

function Modal({
  images,
  currentImageIndex,
  onClose,
  onNext,
  onPrev,
  onThumbnailClick,
  imagename,
  toggleFlagInModal,
}) {
  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <button
          className="flag-button-modal"
          style={{
            color: "white",
            borderRadius: "5px",
            padding: "2px 5px",
            cursor: "pointer",
            marginTop: "10px",
          }}
          onClick={(event) => toggleFlagInModal(currentImageIndex, event)}
        >
          {images[currentImageIndex]?.custom_flag ? (
            <i className="fa-solid fa-flag" style={{ color: "#005eff" }}></i>
          ) : (
            <i className="fa-regular fa-flag"></i>
          )}
        </button>
        <button className="close-button" onClick={onClose}>
          X
        </button>
        <div className="main-image-container">
          <button
            className="nav-button prev-button"
            style={{ top: "220px" }}
            onClick={onPrev}
          >
            &#10094;
          </button>
          <img
            style={{
              maxWidth: "70%",
              maxHeight: "80%",
              backgroundSize: "cover",
            }}
            src={images[currentImageIndex]?.src}
            alt={images[currentImageIndex]?.name}
            className="modal-image"
          />
          <button
            className="nav-button next-button"
            style={{ top: "220px" }}
            onClick={onNext}
          >
            Next
          </button>
          <p>{imagename}</p>
        </div>
        <div className="thumbnails-slider">
          {images.map((image, index) => (
            <div>
              <img
                key={index}
                src={image.src}
                alt={image.name}
                className={`thumbnail ${
                  index === currentImageIndex ? "active" : ""
                }`}
                onClick={() => onThumbnailClick(index)}
              />
              <p style={{ width: "70px", overflow: "hidden", height: "25px" }}>
                {image.name.split(" ").slice(0, 10).join(" ")}
              </p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default App;
